from app import db
from hashlib import md5

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    posts = db.relationship('Post', backref='author', lazy='dynamic')
    about_me = db.Column(db.String(140))
    last_seen = db.Column(db.DateTime)

    @property
    def is_authenticated(self):
        return True
    # The is_authenticated property has a misleading name. In general
    # this method should just return True unless the object represents
    # a user that should not be allowed to authenticate for some reason.

    @property
    def is_active(self):
        return True
    # The is_active property should return True for users unless they
    # are inactive, for example because they have been banned.

    @property
    def is_anonymous(self):
        return False
    # The is_anonymous property should return True only for fake users
    # that are not supposed to log in to the system.

    def get_id(self):
        try:
            return unicode(self.id)  # python 2
        except NameError:
            return str(self.id)  # python 3
    # Finally, the get_id method should return a unique identifier for
    # the user, in unicode format. We use the unique id generated by the
    # database layer for this. Note that due to the differences in unicode
    # handling between Python 2 and 3 we have to provide two alternative
    # versions of this method.

    def avatar(self, size):
        return 'http://www.gravatar.com/avatar/%s?d=mm&s=%d' % (md5(self.email.encode('utf-8')).hexdigest(), size)

    def __repr__(self):
        return '<User %r>' % (self.nickname)
    # The __repr__ method tells Python how to print objects of this class.
    # We will use this for debugging.

class Post(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    body = db.Column(db.String(140))
    timestamp = db.Column(db.DateTime)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    def __repr__(self):
        return '<Post %r>' % (self.body)

# The user_id field in the Post class was initialized as a foreign key,
# so that Flask-SQLAlchemy knows that this field will link to a user.
